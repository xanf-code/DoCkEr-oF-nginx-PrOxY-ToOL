#!/bin/bash

# set username/password, $1 is username and $2 is password
setpasswd ()
{
    htpasswd -bc /etc/nginx/.htpasswd "$1" "$2"
}

# set listen port and proxy_pass target in nginx configuration
# need pass protocol such as http://... or https://... at $2 as proxy_pass
# if no protocal ahead of $2, will insert http:// by default
setnginx ()
{
    local P=`echo $2 | sed 's|\(\(^http\(s*\)://\)*\)|http://|'`
    awk 'gsub("__LISTEN__","'$1'") gsub("__PROXY_PASS__","'$P'") {print $0}' \
        /etc/nginx/conf.d/default.conf \
        > /etc/nginx/conf.d/default.conf.new && \
        mv /etc/nginx/conf.d/default.conf.new /etc/nginx/conf.d/default.conf
}

# start the nginx and script
start ()
{
    eval 'nginx -g "daemon off;" </dev/null >/dev/stdout 2>/dev/stderr &'
    if [ ! -z $1 ]; then
	eval "$* </dev/null >/dev/stdout 2>/dev/stderr &"
    fi
}

# keep running until the jobs number not match.
monitor ()
{
    n=$1
    while true; do
        c=$(jobs | grep Running | wc -l)
        if [ $c -ne $n ]; then
	    echo "process ended when $(date -Iseconds), will exit."
	    exit 1
	fi
        sleep 1
    done
}

usage ()
{
    echo -e "usage:\n"\
         "-u [username] your http username\n"\
         "-p [password] your http password\n"\
         "-c [script] your specified script\n"\
	 "-a [args] args of your script\n"\
	 "-P [args] nginx listening port\n"\
	 "-X [args] proxy_pass of host:port\n"\
	 "-h [args] show this usage"
}

# parse the arguments
while getopts "u:p:c:a:P:X:h" arg
do
    case $arg in
        u)
            USERNAME="$OPTARG"
            ;;
        p)
            PASSWORD="$OPTARG"
            ;;
        c)
            SCRIPT="$OPTARG"
            ;;
	a)
	    ARGS="$OPTARG"
	    ;;
	P)
	    PORT="$OPTARG"
	    ;;
	X)
	    PROXY_PASS="$OPTARG"
	    ;;
	h)
	    usage
	    exit 0
	    ;;
        ?)
	echo "$(usage)" >/dev/stderr
        exit 1
        ;;
    esac
done

# check the variables, you can also set them as the environment variables
# http username
if [ -z "$USERNAME" ]; then
    echo >/dev/stderr "username did not provided!"
    exit 1
fi
# http password
if [ -z "$PASSWORD" ]; then
    echo >/dev/stderr "password did not provided!"
    exit 1
fi
# listen port
if [ -z "$PORT" ]; then
    echo >/dev/stderr "nginx listening port not provided!"
    exit 1
fi
# proxy_pass target
if [ -z "$PROXY_PASS" ]; then
    echo >/dev/stderr "nginx proxy_pass target not provided!"
    exit 1
fi
# if args was provided, script must also be provided
if [ -z "$SCRIPT" ] && [ ! -z "$ARGS" ]; then
    echo >/dev/stderr "provided args without script!"
    exit 1
fi
# is script was provided, it must has the execute permission
if [ ! -z "$SCRIPT" ] && [ -z `which "$SCRIPT"` ]; then
    echo >/dev/stderr "provided script without execute permission!"
    exit 1
fi
# if script provided, will run both nginx and script then will 2 jobs,
# or just nginx server so there will be only 1 job.
if [ "$SCRIPT" ]; then
    njobs=2
else
    njobs=1
fi

# just do it!
setpasswd "$USERNAME" "$PASSWORD"
setnginx "$PORT" "$PROXY_PASS"
start "$SCRIPT" "$ARGS"
monitor "$njobs"
